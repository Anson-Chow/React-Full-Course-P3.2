{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chowa\\\\Desktop\\\\react-meme-generator\\\\src\\\\components\\\\Meme.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState([]);\n  React.useEffect(async () => {\n    async function getMemes() {\n      const res = fetch(\"https://api.imgflip.com/get_memes\");\n      const data = await (await res).json();\n      setAllMemes(data.data.memes);\n    }\n\n    getMemes();\n  }, []);\n\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({ ...prevMeme,\n      [name]: value\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"zYw3zyvVKzWCKm2XiRIz10jzOUk=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","useEffect","getMemes","res","fetch","data","json","memes","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target"],"sources":["C:/Users/chowa/Desktop/react-meme-generator/src/components/Meme.js"],"sourcesContent":["import React from \"react\"\r\n\r\nexport default function Meme() {\r\n    const [meme, setMeme] = React.useState({\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \r\n    })\r\n    const [allMemes, setAllMemes] = React.useState([])\r\n    \r\n\r\n    \r\n    React.useEffect(async () => {\r\n        async function getMemes(){\r\n          const res =  fetch(\"https://api.imgflip.com/get_memes\")\r\n          const data = await (await res).json()\r\n          setAllMemes(data.data.memes)\r\n        }\r\n        getMemes()\r\n    }, [])\r\n    \r\n\r\n    \r\n    function getMemeImage() {\r\n        const randomNumber = Math.floor(Math.random() * allMemes.length)\r\n        const url = allMemes[randomNumber].url\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            randomImage: url\r\n        }))\r\n        \r\n    }\r\n    \r\n    function handleChange(event) {\r\n        const {name, value} = event.target\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            [name]: value\r\n        }))\r\n    }\r\n    \r\n    return (\r\n        <main>\r\n            <div className=\"form\">\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Top text\"\r\n                    className=\"form--input\"\r\n                    name=\"topText\"\r\n                    value={meme.topText}\r\n                    onChange={handleChange}\r\n                />\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Bottom text\"\r\n                    className=\"form--input\"\r\n                    name=\"bottomText\"\r\n                    value={meme.bottomText}\r\n                    onChange={handleChange}\r\n                />\r\n                <button \r\n                    className=\"form--button\"\r\n                    onClick={getMemeImage}\r\n                >\r\n                    Get a new meme image ðŸ–¼\r\n                </button>\r\n            </div>\r\n            <div className=\"meme\">\r\n                <img src={meme.randomImage} className=\"meme--image\" />\r\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n            </div>\r\n        </main>\r\n    )\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAC3B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,KAAK,CAACI,QAAN,CAAe;IACnCC,OAAO,EAAE,EAD0B;IAEnCC,UAAU,EAAE,EAFuB;IAGnCC,WAAW,EAAE;EAHsB,CAAf,CAAxB;EAKA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,KAAK,CAACI,QAAN,CAAe,EAAf,CAAhC;EAIAJ,KAAK,CAACU,SAAN,CAAgB,YAAY;IACxB,eAAeC,QAAf,GAAyB;MACvB,MAAMC,GAAG,GAAIC,KAAK,CAAC,mCAAD,CAAlB;MACA,MAAMC,IAAI,GAAG,MAAM,CAAC,MAAMF,GAAP,EAAYG,IAAZ,EAAnB;MACAN,WAAW,CAACK,IAAI,CAACA,IAAL,CAAUE,KAAX,CAAX;IACD;;IACDL,QAAQ;EACX,CAPD,EAOG,EAPH;;EAWA,SAASM,YAAT,GAAwB;IACpB,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,QAAQ,CAACc,MAApC,CAArB;IACA,MAAMC,GAAG,GAAGf,QAAQ,CAACU,YAAD,CAAR,CAAuBK,GAAnC;IACApB,OAAO,CAACqB,QAAQ,KAAK,EACjB,GAAGA,QADc;MAEjBjB,WAAW,EAAEgB;IAFI,CAAL,CAAT,CAAP;EAKH;;EAED,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;IACzB,MAAM;MAACC,IAAD;MAAOC;IAAP,IAAgBF,KAAK,CAACG,MAA5B;IACA1B,OAAO,CAACqB,QAAQ,KAAK,EACjB,GAAGA,QADc;MAEjB,CAACG,IAAD,GAAQC;IAFS,CAAL,CAAT,CAAP;EAIH;;EAED,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,UAFhB;QAGI,SAAS,EAAC,aAHd;QAII,IAAI,EAAC,SAJT;QAKI,KAAK,EAAE1B,IAAI,CAACG,OALhB;QAMI,QAAQ,EAAEoB;MANd;QAAA;QAAA;QAAA;MAAA,QADJ,eASI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,aAFhB;QAGI,SAAS,EAAC,aAHd;QAII,IAAI,EAAC,YAJT;QAKI,KAAK,EAAEvB,IAAI,CAACI,UALhB;QAMI,QAAQ,EAAEmB;MANd;QAAA;QAAA;QAAA;MAAA,QATJ,eAiBI;QACI,SAAS,EAAC,cADd;QAEI,OAAO,EAAER,YAFb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAyBI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QAAK,GAAG,EAAEf,IAAI,CAACK,WAAf;QAA4B,SAAS,EAAC;MAAtC;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAI,SAAS,EAAC,gBAAd;QAAA,UAAgCL,IAAI,CAACG;MAArC;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAI,SAAS,EAAC,mBAAd;QAAA,UAAmCH,IAAI,CAACI;MAAxC;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAzBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiCH;;GAxEuBL,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}